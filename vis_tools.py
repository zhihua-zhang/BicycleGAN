import os
from matplotlib import pyplot as plt

import torch
import torchvision.utils as vutils

from utils import norm


def infer_viz(model, val_loader, epoch, n_plot):
	device = model.device
	imgs = []
	fig, ax = plt.subplots(1, 1, figsize=(16, 3*n_plot))

	with torch.no_grad():
		for idx, data in enumerate(val_loader, 0):
			if idx == n_plot:
				break
			
			edge_tensor, rgb_tensor = data
			edge_tensor, rgb_tensor = norm(edge_tensor).to(device), norm(rgb_tensor).to(device)
			real_A = edge_tensor
			real_B = rgb_tensor
			bz = real_A.size(0)
		
			img = [real_A.cpu()]
			for _ in range(3):
				z_random = torch.randn(bz, model.args.nz, device=device)
				gen_B_random = model.generator(real_A, z_random).detach().cpu()
				img.append(gen_B_random)
			img += [real_B.cpu()]
			img = torch.cat(img)
			imgs.append(img)

	imgs = torch.cat(imgs)
	viz = vutils.make_grid(imgs, nrow=5, padding=2, normalize=True).permute(1,2,0)

	ax.imshow(viz)

	fig.suptitle(f"Images generated by bicycleGAN, epoch={epoch+1}", fontsize=18)
	ax.set_title("left: real_edge, middle: fake_shoe, right: real_shoe")
	os.makedirs("./results", exist_ok=True)
	fig.savefig(f"./results/biGAN_viz_epoch={epoch+1}.png")